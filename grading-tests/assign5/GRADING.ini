[DEFAULT]
class = MangoRunDiffOutput
timeout = 10

modules_to_grade = ps2.c keyboard.c shell.c
test_program = uart_shell
executable = %(test_program)s.bin
make_prefix = make -f %(dirpath)s/GRADING.make MY_MODULE_SOURCES="%(modules_to_grade)s"
soln_log_path = %(dirpath)s/LOGS/%(test_program)s.staff


[10-PS2Read]
test_program = agtest_ps2_read
description = `ps2_read` reads valid scancodes from PS/2 keyboard
priority = 1
modules_to_grade = ps2.c
class = MangoRunPS2Emulator

[11-PS2InvalidStart]
test_program = agtest_ps2_read_invalid_start
description = `ps2_read` resets on invalid start bit
priority = 2
modules_to_grade = ps2.c
timeout = 5
class = MangoRunPS2Emulator

[12-PS2InvalidParityStop]
test_program = agtest_ps2_read_invalid_parity_stop
description = `ps2_read` resets on invalid parity or invalid stop bit
priority = 2
modules_to_grade = ps2.c
timeout = 5
class = MangoRunPS2Emulator

[20-KeyboardSequence]
test_program = agtest_keyboard_sequence
description = `keyboard_read_sequence` gathers scancodes into sequence for key press or release
priority = 2
modules_to_grade = keyboard.c

[21-KeyboardEvent]
test_program = agtest_keyboard_event
description = `keyboard_read_event` handles key events with and without modifiers
priority = 2
modules_to_grade = keyboard.c

[23-KeyboardEventRepeat]
test_program = agtest_keyboard_event_repeat
description = `keyboard_read_event` handles repeat press event when key held down
priority = 3
modules_to_grade = keyboard.c

[24-KeyboardNext]
test_program = agtest_keyboard_next
description = `keyboard_read_next` recognizes typed keys, with and without modifiers
priority = 1
modules_to_grade = keyboard.c

[30-ShellReadline]
test_program = agtest_shell_readline
description = `shell_readline` reads and echoes keys typed by user
priority = 1
modules_to_grade = shell.c

[31-ShellBackspace]
test_program = agtest_shell_backspace
description = `shell_readline` erases last character when user types backspace
priority = 1
modules_to_grade = shell.c

[32-ShellEvaluate]
test_program = agtest_shell_evaluate
description = `shell_evaluate` parses line and dispatches to shell commands
accept_match_ratio = .98
allow_grader_override = True
priority = 1
modules_to_grade = shell.c

[33-ShellCommands]
test_program = agtest_shell_commands
description = shell commands `echo` `help` `peek` `poke` work as specified
accept_match_ratio = .98
allow_grader_override = True
priority = 2
modules_to_grade = shell.c

[35-ShellRun]
test_program = agtest_shell_run
description = `shell_run` operation
accept_match_ratio = .97
allow_grader_override = True
priority = 1
modules_to_grade = shell.c

[36-ShellPrintf]
test_program = agtest_shell_printf
description = confirm shell printf/read always uses appropriate function pointer
priority = 2
modules_to_grade = shell.c

[40-ExtensionHistoryEditing]
test_program = uart_shell
objective = shell supports history and editing (history command, left/right arrows, up/down arrows)
class = Extension
extension_name = Shell editing and history
interactive = True

[50-StyleReflection]
class = StyleReflection
category = Style Reflection

[51-TestsQuality]
prompt = Enter evaluation of test quality:
class = Quality
category = Tests
