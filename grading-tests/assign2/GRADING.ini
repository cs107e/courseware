[DEFAULT]
class = MangoRunDiffOutput
timeout = 5

modules_to_grade = gpio.c timer.c timer_asm.s
test_program = clock
executable = %(test_program)s.bin
make_prefix = make -f %(dirpath)s/GRADING.make SOURCES="%(modules_to_grade)s"
soln_log_path = %(dirpath)s/LOGS/%(test_program)s.staff

[10-GpioSetFunction]
test_program = agtest_gpio_setfunction
description = `gpio_set_function` changes gpio pin function
modules_to_grade = gpio.c
priority = 1

[11-GpioGetFunction]
test_program = agtest_gpio_getfunction
description = `gpio_get_function` returns gpio pin function
modules_to_grade = gpio.c
priority = 1

[12-GpioSetFunctionClear]
test_program = agtest_gpio_setfunction_clear
description = Subsequent call to `gpio_set_function` replaces previous function set
modules_to_grade = gpio.c
priority = 1

[13-GpioSetFunctionIndependent]
test_program = agtest_gpio_setfunction_independence
description = `gpio_set_function` does not alter functions of neighboring gpio pins
modules_to_grade = gpio.c
priority = 1

[14-GpioRead]
test_program = agtest_gpio_read
description = `gpio_read` returns current level of gpio pin
modules_to_grade = gpio.c
priority = 1

[15-GpioWrite]
test_program = agtest_gpio_write
description = `gpio_write` changes current level of gpio pin
modules_to_grade = gpio.c
priority = 1

[16-GpioSetGetFunctionAll]
test_program = agtest_gpio_setget_all
description = `gpio_set_function` and `gpio_get_function` work correctly for all gpio pins and functions
modules_to_grade = gpio.c
priority = 2

[17-GpioReadWriteAll]
test_program = agtest_gpio_readwrite_all
description = `gpio_read` and `gpio_write` work correctly for all gpio pins
modules_to_grade = gpio.c
priority = 2

[18-GpioInvalid]
test_program = agtest_gpio_invalid
description = Invalid calls to gpio read/write/set/get (invalid function or invalid pin) make no changes, return `GPIO_INVALID_REQUEST`
modules_to_grade = gpio.c
priority = 3

[20-Timer]
test_program = agtest_timer
description = `timer_get_ticks` returns predictably ascending values, `timer_delay` waits proper time
modules_to_grade = timer.c timer_asm.s
priority = 1

[30-ClockStart]
test_program = clock
objective = Clock waits for button press before start
class = Manual
manual_name = Clock application
has_output = False

[31-ClockProgress]
test_program = clock
objective = Clock countdown decrements once per second, correct progression (e.g. 01:00 -> 00:59)
class = Manual
manual_name = Clock application
has_output = False

[32-ClockEnd]
test_program = clock
objective = Countdown stops at zero and signals completion
class = Manual
manual_name = Clock application
has_output = False

[40-ExtensionInputOutput]
executable = None
objective = 1) input device to set countdown 2) good ui, appropriate debounce 3) output alarm
class = Extension
extension_name = Input+Output

[50-StyleReflection]
class = StyleReflection
category = Style Reflection

[51-TestsQuality]
prompt = Enter evaluation of test quality:
class = Quality
category = Tests
