[DEFAULT]
class = MangoRunDiffOutput
timeout = 10

modules_to_grade = ps2.c
test_program = interrupts_console_shell
executable = %(test_program)s.bin
make_prefix = make -f %(dirpath)s/GRADING.make MY_MODULE_SOURCES="%(modules_to_grade)s"
soln_log_path = %(dirpath)s/LOGS/%(test_program)s.staff

[10-PS2ReadInterrupts]
test_program = agtest_ps2_read
description = `ps2_read` (processing via interrupt) reads valid scancodes from PS/2 keyboard
priority = 1
modules_to_grade = ps2.c
class = MangoRunPS2Emulator

[11-PS2InvalidStartInterrupts]
test_program = agtest_ps2_read_invalid_start
description = `ps2_read` (processing via interrupt) resets on invalid start bit
priority = 2
modules_to_grade = ps2.c
class = MangoRunPS2Emulator

[12-PS2InvalidParityStopInterrupts]
test_program = agtest_ps2_read_invalid_parity_stop
description = `ps2_read` (processing via interrupt) resets on invalid parity or invalid stop bit
priority = 2
modules_to_grade = ps2.c
class = MangoRunPS2Emulator

[20-ExtensionProfiler]
test_program = agtest_profiler
objective = shell `profile` command counts samples and identifies program hot spots by function name
modules_to_grade = shell.c
has_output = True
timeout = 120
class = Extension
extension_name = Profiler

[21-ExtensionMouseEvents]
test_program = agtest_mouse
objective = `mouse` module supports PS/2 mouse as input device, properly streams events
modules_to_grade = mouse.c ps2.c
timeout = 60
interactive = True
class = Extension
extension_name = Mouse+Paint (mouse events)
ntests = 2

[21-ExtensionPaintApplication]
objective = paint application allows user to draw using mouse
class = PaintExtension
extension_name = Mouse+Paint (paint application)
ntests = 2

[22-OtherExtension]
objective = student created an additional unique extension
class = Extension
extension_name = other
modules_to_grade = ""

[50-StyleReflection]
class = StyleReflection
category = Style Reflection

# We no longer grade style/tests on a7 (spend time helping students on full system instead :)

# [30-CodeQuality]
# prompt = Enter evaluation of code quality:
# class = Quality
# category = Style#

# [31-TestsQuality]
# prompt = Enter evaluation of test quality:
# class = Quality
# category = Tests
